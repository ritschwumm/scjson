package scjson.converter

import scutil.lang._
import scutil.lang.tc.ApplicativeTupleNSyntax._
import scutil.lang.extension.OptionExtensions._

@SuppressWarnings(Array("org.wartremover.warts.ToString"))
object TupleConverters {
	[#def tuple1ToSeq[T]:JsonConverter[Tuple1[[#T#]],Seq[T]]	=
		Converter total { case Tuple1([#t1#]) => Vector([#t1#]) }#

	]

	[#def seqToTuple1[T]:JsonConverter[Seq[T],Tuple1[[#T#]]]	=
		Converter {
			case Seq([#t1#]) =>
				Validated valid Tuple1([#t1#])
			case x	=>
				Validated invalid JsonError(s"expected 1, not ${x.size.toString} value(s)")
		}#

	]

	[#def tuple1ToMap[E,K,V]([#k1:K#]):Converter[E,Tuple1[[#V#]],Map[K,V]]	=
		Converter total { case Tuple1([#t1#])	=>
			Map([#k1 -> t1#])
		}#

	]

	[#def mapToTuple1[K,V]([#k1:K#]):JsonConverter[Map[K,V],Tuple1[[#V#]]]	=
		Converter { (it:Map[K,V]) =>
			if (it.size == 1) {
				Tuple1(
					[#it.get(k1).toValid(JsonError(s"missing element ${k1.toString}"))#,
					]
				)
				.zipN
			}
			else {
				Validated invalid JsonError(s"expected 1, not ${it.size.toString} value(s)")
			}
		}#
	]
}
