package scjson.converter

import scutil.lang._
import scutil.lang.assoc._
import scutil.lang.pimp.OptionImplicits._

@SuppressWarnings(Array("org.wartremover.warts.ToString"))
object TupleConverters {
	[#def tuple1ToSeq[T]:JsonConverter[([#T#]),ISeq[T]]	=
			Converter total { case ([#t1#]) => Vector([#t1#]) }#

	]

	//--------------------------------------------------------------------------------

	[#def seqToTuple1[T]:JsonConverter[ISeq[T],([#T#])]	=
		Converter {
			case ISeq([#t1#]) =>
				Validated good	(([#t1#]))
			case x	=>
				Validated bad	JsonError(s"expected 1, not ${x.size.toString} value(s)")
		}#

	]

	//--------------------------------------------------------------------------------

	[#def tuple1ToMap[E,K,V]([#k1:K#]):Converter[E,([#V#]),Map[K,V]]	=
			Converter total { case ([#t1#])	=>
				Map([#k1 -> t1#])
			}#

	]

	//--------------------------------------------------------------------------------

	[#def mapToTuple1[K,V]([#k1:K#]):JsonConverter[Map[K,V],([#V#])]	=
			Converter { (it:Map[K,V]) =>
				if (it.size == 1) {
					[#(it get k1 toGood JsonError(s"missing element ${k1.toString}"))# zip
					] map
					unarrow1
				}
				else {
					Validated bad JsonError(s"expected 1, not ${it.size.toString} value(s)")
				}
			}#
	]

}
