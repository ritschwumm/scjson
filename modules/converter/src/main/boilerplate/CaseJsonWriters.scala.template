package scjson.converter

import scutil.lang._
import scutil.lang.assoc._
import scjson.ast._

import scjson.converter.{
	ArrowedConverters		=> AC,
	JsonConverters			=> JC,
	ApplyUnapplyConverters	=> AU
}

trait CaseJsonWriters extends UnitJsonWriters {
	def coWriter[T](value:T):JsonWriter[T]	=
			JsonWriter[Unit] contraMap constant(())

	//--------------------------------------------------------------------------------

	def cc0Writer[S](unapply:S=>Boolean):JsonWriter[S]	=
			(AU unapply0 unapply)													>=>
			(Converter constant[JsonError,Unit,Map[String,JsonValue]] Map.empty)	>=>
			JC.makeObjectMap

	[#def cc1Writer[S,[#T1:JsonWriter#,]](unapply:S=>Option[([#T1#,])], [#k1:String#]):JsonWriter[S]	=
			(AU unapply1 unapply map arrow1)					>=>
			([#JsonWriter[T1]# pair ])							>=>
			AC.arrowed1ToMap[JsonError,String,JsonValue]([#k1#])	>=>
			JC.makeObjectMap#
	]

	//--------------------------------------------------------------------------------

	[#def cc1AutoWriter[S,[#T1:JsonWriter#,]](unapply:S=>Option[([#T1#,])])(implicit FN:FieldNames[S]):JsonWriter[S]	= {
		val Vector([#k1#,]) = FN.names
		cc1Writer(unapply, [#k1#, ])
	}#
	]
}
