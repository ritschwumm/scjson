package scjson.converter

import scala.deriving.Mirror
import scala.compiletime.*

import scutil.lang.*
import scutil.lang.TupleNApplySyntax.*
import scutil.lang.tc.ApplicativeTupleNSyntax.*
import scjson.ast.*

import scjson.converter.{
	TupleConverters	as TC,
	JsonConverters	as JC,
	UnitConverters	as UC,
}

trait CaseJsonWriters extends UnitJsonWriters {
	def coWriter[T](value:T):JsonWriter[T]	=
		UC.UnitWriter.contraMap(constant(()))

	/*
	def cc0Writer[S]:JsonWriter[S]	=
		UC.UnitWriter.contraMap(constant(()))
	*/

	def cc0AutoWriter[S<:Product]:JsonWriter[S]	=
		UC.UnitWriter.contraMap(constant(()))

	[#inline def cc1AutoWriter[S<:Product](using m:Mirror.ProductOf[S], ev:m.MirroredElemTypes <:< Tuple1[[#?#]], [#f1:JsonWriter[Tuple.Elem[m.MirroredElemTypes, 0]]#,]):JsonWriter[S]	= {
		// TODO this sucks, but scala is not smart enough to find out
		// i'm manually doing a Map[MirroredElemTypes,JsonWriter]
		// and this type is identical to m.MirroredElemTypes
		type Values	=
			Tuple1[
				[#Tuple.Elem[m.MirroredElemTypes, 0]#,
				]
			]

		Converter.total[JsonError,S,m.MirroredElemTypes] { (s:S) =>
			Tuple.fromProductTyped(s)(using m)
		} >=>
		Converter { (values:m.MirroredElemTypes) =>
			Tuple1(
				[#f1.convert#,
				]
			)
			.applyN(values.asInstanceOf[Values])
			.zipN
		} >=>
		TC.tuple1ToMap[JsonError,String,JsonValue](
			[#constValue[Tuple.Elem[m.MirroredElemLabels,0] & String]#,
			]
		)	>=>
		JC.makeObjectMap
	}#

	]
}
