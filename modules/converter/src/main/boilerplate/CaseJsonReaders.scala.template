package scjson.converter

import scutil.lang._
import scutil.lang.TupleNApplySyntax._
import scutil.lang.tc.ApplicativeTupleNSyntax._
import scjson.ast._

import scjson.converter.{
	TupleConverters	=> TC,
	JsonConverters	=> JC,
	UnitConverters	=> UC
}

trait CaseJsonReaders extends UnitJsonReaders {
	def coReader[T](value:T):JsonReader[T]	=
		UC.UnitReader map constant(value)

	def cc0Reader[S](apply:()=>S):JsonReader[S]	=
		JC.expectObjectMap	>=>
		Converter { map =>
			if (map.isEmpty)	Validated valid apply()
			else				Validated invalid JsonError(s"expected zero elements, got ${map.size.toString}")
		}

	[#def cc1Reader[S,[#T1:JsonReader#,]](apply:([#T1#,])=>S, [#k1:String#]):JsonReader[S]	=
		JC.expectObjectMap	>=>
		TC.mapToTuple1[String,JsonValue]([#k1#])	>=>
		Converter { values =>
			Tuple1(
				[#JsonReader[T1].convert#,
				]
			)
			.applyN(values)
			.mapN(apply)
		}#

	]

	//--------------------------------------------------------------------------------

	[#def cc1AutoReader[S,[#T1:JsonReader#,]](apply:([#T1#,])=>S)(implicit FN:FieldNames[S]):JsonReader[S]	=
		FN.names match {
			case Vector([#k1#,])	=> cc1Reader(apply, [#k1#, ])
			case x	=> sys error s"unexpected number of elements in ${x.toString}"
		}#

	]
}
