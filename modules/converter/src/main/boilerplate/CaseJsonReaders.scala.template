package scjson.converter

import scala.deriving.Mirror
import scala.compiletime.*

import scutil.lang.*
import scutil.lang.TupleNApplySyntax.*
import scutil.lang.tc.ApplicativeTupleNSyntax.*
import scjson.ast.*

import scjson.converter.{
	TupleConverters	as TC,
	JsonConverters	as JC,
	UnitConverters	as UC
}

trait CaseJsonReaders extends UnitJsonReaders {
	def coReader[T](value:T):JsonReader[T]	=
		UC.UnitReader.map(constant(value))

	/*
	def cc0Reader[S](apply:()=>S):JsonReader[S]	=
		UC.UnitReader.map { _ => apply() }
	*/

	def cc0AutoReader[S](using m:Mirror.ProductOf[S] { type MirroredElemTypes = EmptyTuple }):JsonReader[S]	=
		UC.UnitReader.map { _ =>
			m.fromProduct(EmptyTuple)
		}

	[#inline def cc1AutoReader[S](using m:Mirror.ProductOf[S], ev:m.MirroredElemTypes <:< Tuple1[[#?#]], [#f1:JsonReader[Tuple.Elem[m.MirroredElemTypes, 0]]#,]):JsonReader[S]	= {
		JC.expectObjectMap	>=>
		TC.mapToTuple1[String,JsonValue](
			[#constValue[Tuple.Elem[m.MirroredElemLabels,0] & String]#,
			]
		)	>=>
		Converter { (values:Tuple1[[#JsonValue#]]) =>
			Tuple1(
				[#f1.convert#,
				]
			)
			.applyN(values)
			.zipN
			.map(m.fromProduct)
		}
	}#

	]
}
