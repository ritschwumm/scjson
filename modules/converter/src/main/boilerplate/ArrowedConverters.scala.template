package scjson.converter

import scutil.lang._
import scutil.lang.assoc._
import scutil.lang.extension.OptionImplicits._

@SuppressWarnings(Array("org.wartremover.warts.ToString"))
object ArrowedConverters {
	[#def arrowed1ToSeq[T]:JsonConverter[Arrowed1[[#T#]],Seq[T]]	=
		Converter total { case ([#t1# -> ]) => Vector([#t1#]) }#

	]

	//--------------------------------------------------------------------------------

	[#def seqToArrowed1[T]:JsonConverter[Seq[T],Arrowed1[[#T#]]]	=
		Converter {
			case Seq([#t1#]) =>
				Validated valid (([#t1# -> ]))
			case x	=>
				Validated invalid JsonError(s"expected 1, not ${x.size.toString} value(s)")
		}#

	]

	//--------------------------------------------------------------------------------

	[#def arrowed1ToMap[E,K,V]([#k1:K#]):Converter[E,Arrowed1[[#V#]],Map[K,V]]	=
		Converter total { case ([#t1# -> ])	=>
			Map([#k1 -> t1#])
		}#
	]

	//------------------------------------------------------------------------------

	[#def mapToArrowed1[K,V]([#k1:K#]):JsonConverter[Map[K,V],Arrowed1[[#V#]]]	=
		Converter { (it:Map[K,V]) =>
			if (it.size == 1) {
				[#(it get k1 toValid JsonError(s"missing element ${k1.toString}"))# tuple
				]
			}
			else {
				Validated invalid JsonError(s"expected 1, not ${it.size.toString} value(s)")
			}
		}#
	]
}
