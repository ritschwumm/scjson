package scjson.pickle.protocol

import scutil.lang.FieldNames
import scjson.ast._
import scjson.pickle._
import JsonPickleUtil._

trait CaseClassProtocolGenerated {
	[2..#implicit def caseClassFormat1[[#S1:Format#],T](apply:([#S1#])=>T, unapply:T=>Option[([#S1#])])(implicit FN:FieldNames[T]):Format[T]	= {
		val Vector([#k1#])	= FN.names
		Format[T](
			(out:T)	=> {
				val fields	= unapplyTotal(unapply, out)
				JsonObject.Var([#k1 -> doWrite[S1](fields._1)#])
			},
			(in:JsonValue)	=> {
				val map	= objectMap(in)
				apply([#doReadUnsafe[S1](JsonPickleUtil requireField (map, k1))#])
			}
		)
	}
	#
	]
}
